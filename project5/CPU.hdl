// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */

 //Samiul Islam Sami
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//Instruction decoding segment
    Not(in=instruction[15], out=ainst);
    Not(in=ainst, out=cinst);


    //A Register
    And(a=cinst, b=instruction[5], out=computea);
    Mux16(a=instruction, b=alu, sel=instruction[15], out=newa);
    Or(a=ainst, b=computea, out=loada);
    ARegister(in=newa, load=loada, out=a);

    //D Register
    And(a=instruction[4], b=cinst, out=loadd);
    DRegister(in=alu, load=loadd, out=d);

    //ALU
    Mux16(a=a, b=inM, sel=instruction[12], out=aorm);
    And(a=instruction[11], b=true, out=zx);
    And(a=instruction[10], b=true, out=nx);
    And(a=instruction[9], b=true, out=zy);
    And(a=instruction[8], b=true, out=ny);
    And(a=instruction[7], b=true, out=f);
    And(a=instruction[6], b=true, out=no);
    ALU(x=d, y=aorm, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=alu, zr=zr, ng=ng);

    //Jump
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=pos);
    And(a=instruction[2], b=ng, out=jlt);
    And(a=instruction[1], b=zr, out=jz);
    And(a=instruction[0], b=pos, out=jpos);
    Or(a=jlt, b=jz, out=jltz);
    Or(a=jltz, b=jpos, out=jumpcondition);
    And(a=cinst, b=jumpcondition, out=shouldjump);

    //Outbits
    And(a=cinst, b=instruction[3], out=writeM);
    And16(a=a, b=true, out[0..14]=addressM);
    And16(a=alu, b=true, out=outM);
    PC(in=a, load=shouldjump, inc=true, reset=reset, out[0..14]=pc);
 
}